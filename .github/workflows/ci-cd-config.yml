# CI/CD Configuration for CreativeWriter2
# This file defines the overall CI/CD strategy and configuration

name: üõ†Ô∏è CI/CD Configuration

# This workflow doesn't run automatically - it serves as documentation
# and can be used for manual configuration validation
on:
  workflow_dispatch:
    inputs:
      validate_config:
        description: 'Validate CI/CD configuration'
        type: boolean
        default: true

env:
  # Global CI/CD Settings
  NODE_VERSION: '20'
  NPM_CACHE_VERSION: 'v1'
  
  # Branch Strategy
  MAIN_BRANCH: 'main'
  RELEASE_BRANCH: 'release'
  
  # Quality Gates
  LINT_REQUIRED: true
  BUILD_REQUIRED: true
  TESTS_REQUIRED: false  # Optional until test coverage improves
  SECURITY_SCAN_REQUIRED: true
  
  # Merge Strategy
  AUTO_MERGE_ENABLED: true
  BREAKING_CHANGES_REQUIRE_APPROVAL: true
  BOT_AUTO_APPROVE: true
  
  # Docker Configuration
  DOCKER_REGISTRY: 'ghcr.io'
  DOCKER_IMAGE_PREFIX: 'marcodroll/creativewriter2'

jobs:
  validate-config:
    name: üîç Validate Configuration
    runs-on: ubuntu-latest
    if: github.event.inputs.validate_config == 'true'
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üîç Validate workflow files
        run: |
          echo "üîç Validating GitHub Actions workflow files..."
          
          # Check if required workflows exist
          required_workflows=(
            ".github/workflows/release-merge.yml"
            ".github/workflows/ci-main.yml"
            ".github/workflows/pr-validation.yml"
          )
          
          for workflow in "${required_workflows[@]}"; do
            if [ -f "$workflow" ]; then
              echo "‚úÖ $workflow exists"
            else
              echo "‚ùå $workflow missing"
              exit 1
            fi
          done

      - name: üèóÔ∏è Validate Node.js configuration
        run: |
          echo "üîç Validating Node.js and npm configuration..."
          
          # Check package.json
          if [ -f "package.json" ]; then
            echo "‚úÖ package.json exists"
            
            # Validate required scripts
            required_scripts=("build" "lint")
            for script in "${required_scripts[@]}"; do
              if npm run "$script" --silent -- --help >/dev/null 2>&1; then
                echo "‚úÖ npm script '$script' is available"
              else
                echo "‚ö†Ô∏è npm script '$script' not available or not configured"
              fi
            done
          else
            echo "‚ùå package.json missing"
            exit 1
          fi

      - name: üê≥ Validate Docker configuration
        run: |
          echo "üîç Validating Docker configuration..."
          
          # Check for Docker files
          if [ -f "Dockerfile" ]; then
            echo "‚úÖ Dockerfile exists"
          else
            echo "‚ö†Ô∏è Dockerfile not found in root (may be in subdirectories)"
          fi
          
          if [ -f "docker-compose.yml" ]; then
            echo "‚úÖ docker-compose.yml exists"
          else
            echo "‚ö†Ô∏è docker-compose.yml not found"
          fi

      - name: üìä Generate configuration report
        run: |
          echo "## üõ†Ô∏è CI/CD Configuration Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Current Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Version:** ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Main Branch:** ${{ env.MAIN_BRANCH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Branch:** ${{ env.RELEASE_BRANCH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-merge Enabled:** ${{ env.AUTO_MERGE_ENABLED }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Breaking Changes Require Approval:** ${{ env.BREAKING_CHANGES_REQUIRE_APPROVAL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Quality Gates" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting:** ${{ env.LINT_REQUIRED == 'true' && 'Required' || 'Optional' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build:** ${{ env.BUILD_REQUIRED == 'true' && 'Required' || 'Optional' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests:** ${{ env.TESTS_REQUIRED == 'true' && 'Required' || 'Optional' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** ${{ env.SECURITY_SCAN_REQUIRED == 'true' && 'Required' || 'Optional' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Workflows Available" >> $GITHUB_STEP_SUMMARY
          echo "1. **PR Validation** - Validates pull requests before merge" >> $GITHUB_STEP_SUMMARY
          echo "2. **Main Branch CI** - Continuous integration for main branch" >> $GITHUB_STEP_SUMMARY
          echo "3. **Release Merge Automation** - Automated merging to release branch" >> $GITHUB_STEP_SUMMARY
          echo "4. **Docker Build** - Container image building and publishing" >> $GITHUB_STEP_SUMMARY
          echo "5. **Public Sync** - Synchronization to public repository" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Usage Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### For Developers:" >> $GITHUB_STEP_SUMMARY
          echo "1. Create PRs against \`main\` branch" >> $GITHUB_STEP_SUMMARY
          echo "2. Ensure PR titles follow conventional commit format" >> $GITHUB_STEP_SUMMARY
          echo "3. Wait for automated validation to pass" >> $GITHUB_STEP_SUMMARY
          echo "4. Get human review and approval" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### For Release Management:" >> $GITHUB_STEP_SUMMARY
          echo "1. Merges to \`main\` automatically trigger release merge" >> $GITHUB_STEP_SUMMARY  
          echo "2. Breaking changes require manual approval" >> $GITHUB_STEP_SUMMARY
          echo "3. Release branch auto-syncs to public repository" >> $GITHUB_STEP_SUMMARY
          echo "4. Docker images are built and published automatically" >> $GITHUB_STEP_SUMMARY

  # Documentation generation
  generate-docs:
    name: üìö Generate Documentation
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üìö Generate CI/CD documentation
        run: |
          mkdir -p docs/ci-cd
          
          cat > docs/ci-cd/README.md << 'EOF'
          # üõ†Ô∏è CI/CD Documentation for CreativeWriter2
          
          This document describes the Continuous Integration and Continuous Deployment (CI/CD) setup for CreativeWriter2.
          
          ## üèóÔ∏è Architecture Overview
          
          Our CI/CD pipeline follows modern best practices with automated quality gates, intelligent merge strategies, and comprehensive validation.
          
          ### üîÑ Workflow Overview
          
          ```mermaid
          graph TB
              A[Developer Push] --> B[PR Validation]
              B --> C{Validation Passed?}
              C -->|Yes| D[Human Review]
              C -->|No| E[Fix Issues]
              E --> B
              D --> F[Merge to Main]
              F --> G[CI Main Branch]
              G --> H{Quality Gates?}
              H -->|Pass| I[Auto-merge to Release]
              H -->|Fail| J[Block Merge]
              I --> K[Docker Build]
              I --> L[Public Sync]
              K --> M[Publish Images]
              L --> N[Public Repository]
          ```
          
          ## üìã Workflows
          
          ### 1. PR Validation (`pr-validation.yml`)
          - **Trigger:** Pull requests to main/release branches
          - **Purpose:** Validate code quality before merge
          - **Checks:** 
            - Code linting
            - Build verification
            - Security scanning
            - PR format validation
          
          ### 2. Main Branch CI (`ci-main.yml`)
          - **Trigger:** Push to main branch
          - **Purpose:** Comprehensive validation of main branch
          - **Checks:**
            - Full test suite
            - Build artifacts
            - Security analysis
            - Docker build test
          
          ### 3. Release Merge Automation (`release-merge.yml`)
          - **Trigger:** Push to main branch (after CI passes)
          - **Purpose:** Automated merging to release branch
          - **Features:**
            - Smart merge decision logic
            - Breaking change detection
            - Manual approval for critical changes
            - Automated commit categorization
          
          ### 4. Docker Build Workflows
          - **Files:** `docker-*.yml`
          - **Purpose:** Build and publish container images
          - **Features:**
            - Multi-service building
            - Semantic versioning
            - GitHub Container Registry publishing
          
          ### 5. Public Sync (`sync-public.yml`)
          - **Trigger:** Push to release branch
          - **Purpose:** Sync to public repository
          - **Process:** Clean sync with development files removed
          
          ## üéØ Quality Gates
          
          ### Required Gates (Blocking)
          - ‚úÖ ESLint validation must pass
          - ‚úÖ Production build must succeed
          - ‚úÖ Security scan must complete
          
          ### Optional Gates (Warning)
          - ‚ö†Ô∏è Unit tests (when available)
          - ‚ö†Ô∏è Code coverage metrics
          
          ## üöÄ Merge Strategy
          
          ### Automatic Merge Conditions
          - ‚úÖ All quality gates pass
          - ‚úÖ Non-breaking changes (feat, fix, chore)
          - ‚úÖ Documentation updates
          
          ### Manual Approval Required
          - ‚ö†Ô∏è Breaking changes detected
          - ‚ö†Ô∏è Major version bumps
          - ‚ö†Ô∏è Security-related changes
          
          ## üîß Configuration
          
          ### Branch Protection Rules
          - `main`: Requires PR, reviews, status checks
          - `release`: Protected, only auto-merge allowed
          
          ### Environment Variables
          - `NODE_VERSION`: Node.js version for builds
          - `DOCKER_REGISTRY`: Container registry URL
          - `AUTO_MERGE_ENABLED`: Enable/disable auto-merge
          
          ## üìö Developer Guide
          
          ### Creating a Pull Request
          1. **Title Format:** Use conventional commits (`feat:`, `fix:`, etc.)
          2. **Description:** Provide clear description of changes
          3. **Breaking Changes:** Document in PR body if applicable
          4. **Wait for Validation:** Let automated checks complete
          
          ### Merge Process
          1. **PR Validation:** Automated quality checks
          2. **Human Review:** Code review and approval
          3. **Merge to Main:** Squash and merge
          4. **Auto-merge to Release:** Automated process
          5. **Public Sync:** Automatic deployment
          
          ### Troubleshooting
          
          #### Failed Quality Gates
          - Check linting errors: `npm run lint`
          - Test build locally: `npm run build`
          - Review security warnings in PR
          
          #### Blocked Auto-merge
          - Breaking changes require manual workflow trigger
          - Check workflow status in Actions tab
          - Review merge decision logic in logs
          
          ## üîó Resources
          
          - [GitHub Actions Documentation](https://docs.github.com/en/actions)
          - [Conventional Commits](https://www.conventionalcommits.org/)
          - [Semantic Versioning](https://semver.org/)
          
          ---
          
          *This documentation is auto-generated. Last updated: $(date)*
          EOF
          
          echo "üìö CI/CD documentation generated"

      - name: üì§ Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: ci-cd-documentation
          path: docs/ci-cd/
          retention-days: 30

---

## üéØ CI/CD Specialist Subagent Configuration

This configuration creates a comprehensive CI/CD pipeline with the following capabilities:

### ü§ñ Specialized Subagent Role: CI/CD Release Manager

**Responsibilities:**
- Automated release branch merging with quality gates
- Intelligent merge decision making based on commit analysis
- Breaking change detection and manual approval workflows
- Integration with existing Docker build and public sync processes
- Comprehensive validation and security scanning

**Key Features:**
1. **Smart Merge Logic** - Analyzes commits and determines appropriate merge strategy
2. **Quality Gates** - Enforces code quality, build success, and security standards
3. **Breaking Change Handling** - Requires manual approval for potentially disruptive changes
4. **Integration** - Works seamlessly with existing Docker builds and public repository sync
5. **Comprehensive Logging** - Detailed workflow summaries and decision tracking

**Configuration Benefits:**
- Reduces manual release management overhead
- Ensures consistent quality standards
- Prevents deployment of broken code
- Maintains development velocity while enforcing standards
- Provides clear audit trail of release decisions