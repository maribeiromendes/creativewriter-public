name: 🚀 Release Merge Automation

on:
  push:
    branches: [main]
    paths-ignore: 
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - '.vscode/**'
  
  workflow_dispatch:
    inputs:
      merge_type:
        description: 'Type of merge to perform'
        required: true
        default: 'auto'
        type: choice
        options: 
          - 'auto'
          - 'selective'
          - 'force'
      
      skip_checks:
        description: 'Skip quality checks (emergency only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  MAIN_BRANCH: 'main'
  RELEASE_BRANCH: 'release'

jobs:
  # Quality Gate - Validate before merge
  quality-gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_checks }}
    outputs:
      should_merge: ${{ steps.decision.outputs.should_merge }}
      commit_type: ${{ steps.analysis.outputs.commit_type }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          echo "✅ Dependencies installed successfully"

      - name: 🔍 Run linting
        run: |
          echo "🧹 Running ESLint..."
          npm run lint
          echo "✅ Linting passed"

      - name: 🏗️ Test build
        run: |
          echo "🏗️ Testing production build..."
          npm run build
          echo "✅ Build completed successfully"
          
          # Verify critical files exist
          if [ ! -f "dist/creativewriter2/index.html" ]; then
            echo "❌ Build verification failed: index.html not found"
            exit 1
          fi
          
          echo "✅ Build verification passed"

      - name: 📊 Analyze commit types
        id: analysis
        run: |
          # Get commits since last release merge
          LAST_RELEASE_COMMIT=$(git log --oneline --grep="Auto-merge main to release" --grep="🚀 Auto-merge main to release" -1 --format="%H" origin/release 2>/dev/null || echo "")
          
          if [ -n "$LAST_RELEASE_COMMIT" ]; then
            COMMITS=$(git log --oneline ${LAST_RELEASE_COMMIT}..HEAD --format="%s")
          else
            # If no previous release merge, get last 10 commits
            COMMITS=$(git log --oneline -10 --format="%s")
          fi
          
          echo "📋 Analyzing commits:"
          echo "$COMMITS"
          
          # Analyze commit types
          HAS_BREAKING=false
          HAS_FEAT=false
          HAS_FIX=false
          
          while IFS= read -r commit; do
            if [[ "$commit" == *"BREAKING CHANGE"* ]] || [[ "$commit" == *"!"* ]]; then
              HAS_BREAKING=true
            elif [[ "$commit" == feat:* ]] || [[ "$commit" == *"feat:"* ]]; then
              HAS_FEAT=true
            elif [[ "$commit" == fix:* ]] || [[ "$commit" == *"fix:"* ]]; then
              HAS_FIX=true
            fi
          done <<< "$COMMITS"
          
          # Determine merge type
          if [ "$HAS_BREAKING" = true ]; then
            COMMIT_TYPE="breaking"
          elif [ "$HAS_FEAT" = true ]; then
            COMMIT_TYPE="feature"
          elif [ "$HAS_FIX" = true ]; then
            COMMIT_TYPE="fix"
          else
            COMMIT_TYPE="patch"
          fi
          
          echo "commit_type=$COMMIT_TYPE" >> $GITHUB_OUTPUT
          echo "🏷️ Detected commit type: $COMMIT_TYPE"

      - name: 🤖 Merge decision
        id: decision
        run: |
          MERGE_TYPE="${{ inputs.merge_type || 'auto' }}"
          COMMIT_TYPE="${{ steps.analysis.outputs.commit_type }}"
          
          # Decision logic
          case "$MERGE_TYPE" in
            "force")
              SHOULD_MERGE=true
              echo "🚨 Force merge requested"
              ;;
            "selective")
              # Manual approval needed for selective merges
              SHOULD_MERGE=false
              echo "✋ Selective merge requires manual approval"
              ;;
            "auto")
              case "$COMMIT_TYPE" in
                "breaking")
                  SHOULD_MERGE=false
                  echo "⚠️ Breaking changes detected - manual review required"
                  ;;
                *)
                  SHOULD_MERGE=true
                  echo "✅ Auto-merge approved for $COMMIT_TYPE changes"
                  ;;
              esac
              ;;
          esac
          
          echo "should_merge=$SHOULD_MERGE" >> $GITHUB_OUTPUT

  # Automated merge to release branch
  auto-merge:
    name: 🔄 Auto Merge to Release
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: |
      always() && 
      (needs.quality-gate.result == 'success' || inputs.skip_checks) &&
      (needs.quality-gate.outputs.should_merge == 'true' || inputs.skip_checks || inputs.merge_type == 'force')
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          echo "✅ Git configured for automation"

      - name: 🔄 Perform merge
        run: |
          echo "🔄 Starting merge process..."
          
          # Ensure we have latest changes
          git fetch origin
          
          # Switch to release branch
          git checkout ${{ env.RELEASE_BRANCH }}
          git pull origin ${{ env.RELEASE_BRANCH }}
          
          echo "📊 Release branch status:"
          git log --oneline -3
          
          # Check if main is ahead of release
          BEHIND_COUNT=$(git rev-list --count ${{ env.RELEASE_BRANCH }}..${{ env.MAIN_BRANCH }})
          echo "📈 Main is $BEHIND_COUNT commits ahead of release"
          
          if [ "$BEHIND_COUNT" -eq 0 ]; then
            echo "✅ Release branch is already up to date"
            exit 0
          fi
          
          # Perform merge
          MERGE_MSG="🚀 Auto-merge main to release
          
          📦 Merged $BEHIND_COUNT commits from main branch
          🤖 Automated by GitHub Actions
          
          Commit type: ${{ needs.quality-gate.outputs.commit_type || 'manual' }}
          Triggered by: ${{ github.event_name }}
          Merge type: ${{ inputs.merge_type || 'auto' }}
          
          🤖 Generated with GitHub Actions
          Co-Authored-By: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          
          echo "🔄 Merging main into release..."
          git merge ${{ env.MAIN_BRANCH }} --no-ff -m "$MERGE_MSG"
          
          echo "✅ Merge completed successfully"

      - name: 🚀 Push changes
        run: |
          echo "🚀 Pushing merged changes to release branch..."
          git push origin ${{ env.RELEASE_BRANCH }}
          echo "✅ Changes pushed successfully"

      - name: 📊 Generate summary
        run: |
          echo "## 🚀 Release Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Successfully merged main to release branch**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit Type:** ${{ needs.quality-gate.outputs.commit_type || 'manual' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Merge Type:** ${{ inputs.merge_type || 'auto' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered By:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Release branch updated automatically" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Public sync will trigger on release branch push" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Docker images will be built and published" >> $GITHUB_STEP_SUMMARY

  # Manual approval workflow for breaking changes
  manual-approval:
    name: 📋 Manual Approval Required
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: |
      always() && 
      needs.quality-gate.result == 'success' && 
      needs.quality-gate.outputs.should_merge == 'false' &&
      inputs.merge_type != 'force'
    
    steps:
      - name: 📋 Create manual approval issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitType = '${{ needs.quality-gate.outputs.commit_type }}';
            const mergeType = '${{ inputs.merge_type || 'auto' }}';
            
            const issueBody = `
            ## 🚨 Manual Release Merge Approval Required
            
            A merge to the release branch requires manual approval due to the following conditions:
            
            ### 📊 Analysis Results
            - **Commit Type:** ${commitType}
            - **Merge Type:** ${mergeType}
            - **Trigger:** ${{ github.event_name }}
            - **Branch:** ${{ github.ref }}
            
            ### 🔍 Reason for Manual Review
            ${commitType === 'breaking' ? '⚠️ **Breaking changes detected** - requires careful review before release' : ''}
            ${mergeType === 'selective' ? '✋ **Selective merge requested** - requires manual cherry-picking' : ''}
            
            ### ✅ Action Required
            To proceed with the merge, run the workflow manually:
            1. Go to [Actions → Release Merge Automation](https://github.com/${{ github.repository }}/actions/workflows/release-merge.yml)
            2. Click "Run workflow"
            3. Select merge type: "force" (if approved)
            4. Review changes carefully before proceeding
            
            ### 📋 Pre-merge Checklist
            - [ ] Breaking changes are documented
            - [ ] Migration guide updated (if needed)
            - [ ] Version bump is appropriate
            - [ ] All tests pass
            - [ ] Manual testing completed
            
            ---
            🤖 This issue was created automatically by GitHub Actions.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Manual Release Merge Approval Required - ${commitType} changes`,
              body: issueBody,
              labels: ['release', 'manual-approval', 'ci-cd']
            });

      - name: 📊 Generate manual approval summary
        run: |
          echo "## 📋 Manual Approval Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Automatic merge blocked**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚨 Reason" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit Type:** ${{ needs.quality-gate.outputs.commit_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Requires:** Manual review and approval" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 How to Proceed" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the detected changes carefully" >> $GITHUB_STEP_SUMMARY
          echo "2. Run the workflow manually with 'force' option if approved" >> $GITHUB_STEP_SUMMARY
          echo "3. An issue has been created to track this approval" >> $GITHUB_STEP_SUMMARY