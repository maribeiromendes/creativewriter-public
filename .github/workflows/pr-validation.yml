name: 🔍 PR Validation

on:
  pull_request:
    branches: [main, release]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '20'

jobs:
  # PR metadata analysis
  analyze-pr:
    name: 📋 PR Analysis
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      has_breaking_changes: ${{ steps.analyze.outputs.has_breaking_changes }}
      change_type: ${{ steps.analyze.outputs.change_type }}
      files_changed: ${{ steps.analyze.outputs.files_changed }}
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Analyze PR changes
        id: analyze
        uses: actions/github-script@v7
        with:
          script: |
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // Analyze title and body for breaking changes
            const title = pr.title.toLowerCase();
            const body = (pr.body || '').toLowerCase();
            
            const hasBreakingChanges = 
              title.includes('breaking change') ||
              title.includes('!:') ||
              body.includes('breaking change') ||
              body.includes('breaking-change') ||
              title.startsWith('feat!:') ||
              title.startsWith('fix!:');

            // Categorize change type
            let changeType = 'patch';
            if (hasBreakingChanges) {
              changeType = 'breaking';
            } else if (title.startsWith('feat')) {
              changeType = 'feature';
            } else if (title.startsWith('fix')) {
              changeType = 'fix';
            }

            // Analyze changed files
            const changedFiles = files.map(f => f.filename);
            const fileCategories = {
              source: changedFiles.filter(f => f.startsWith('src/')).length,
              tests: changedFiles.filter(f => f.includes('.spec.') || f.includes('test')).length,
              docs: changedFiles.filter(f => f.endsWith('.md') || f.startsWith('docs/')).length,
              config: changedFiles.filter(f => f.includes('package.json') || f.includes('.json') || f.includes('.yml')).length,
              workflows: changedFiles.filter(f => f.startsWith('.github/workflows/')).length
            };

            // Set outputs
            core.setOutput('has_breaking_changes', hasBreakingChanges);
            core.setOutput('change_type', changeType);
            core.setOutput('files_changed', JSON.stringify(fileCategories));

            // Create summary
            const summary = `
            ## 📊 PR Analysis Results
            
            - **Change Type:** ${changeType}
            - **Breaking Changes:** ${hasBreakingChanges ? '⚠️ Yes' : '✅ No'}
            - **Files Changed:** ${files.length} files
              - Source files: ${fileCategories.source}
              - Test files: ${fileCategories.tests}  
              - Documentation: ${fileCategories.docs}
              - Configuration: ${fileCategories.config}
              - Workflows: ${fileCategories.workflows}
            `;
            
            await core.summary.addRaw(summary).write();

  # Quick validation for draft PRs
  draft-validation:
    name: 📝 Draft PR Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == true
    
    steps:
      - name: 📝 Draft PR info
        run: |
          echo "📝 This is a draft PR - running basic validation only"
          echo "✅ Draft PR acknowledged"

  # Full validation for ready PRs
  full-validation:
    name: 🔍 Full Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [analyze-pr]
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧹 Lint check
        run: |
          echo "🧹 Running lint check..."
          npm run lint
          echo "✅ Lint check passed"

      - name: 🏗️ Build check
        run: |
          echo "🏗️ Testing build..."
          npm run build
          echo "✅ Build check passed"

      - name: 🧪 Test check
        run: |
          echo "🧪 Running tests if available..."
          if npm run test -- --help >/dev/null 2>&1; then
            npm run test -- --watch=false --browsers=ChromeHeadless
            echo "✅ Tests passed"
          else
            echo "⚠️ No tests configured - skipping"
          fi
        continue-on-error: true

  # Security check for PRs
  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔒 Dependency audit
        run: |
          echo "🔍 Checking for known vulnerabilities..."
          npm audit --audit-level=high --production
          echo "✅ Security check completed"

      - name: 🔍 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # PR requirements check
  requirements-check:
    name: ✅ Requirements Check
    runs-on: ubuntu-latest
    needs: [analyze-pr, full-validation, security-check]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: 📋 Validate PR requirements
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const requirements = [];
            
            // Check PR title format
            const titlePattern = /^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?: .+/;
            if (!titlePattern.test(pr.title)) {
              requirements.push('❌ PR title should follow conventional commit format');
            } else {
              requirements.push('✅ PR title follows conventional commit format');
            }
            
            // Check PR description
            if (!pr.body || pr.body.trim().length < 20) {
              requirements.push('❌ PR description should be at least 20 characters');
            } else {
              requirements.push('✅ PR description is adequate');
            }
            
            // Check if breaking changes are documented
            const hasBreakingChanges = '${{ needs.analyze-pr.outputs.has_breaking_changes }}' === 'true';
            if (hasBreakingChanges) {
              const hasBreakingDocs = pr.body && pr.body.toLowerCase().includes('breaking change');
              if (!hasBreakingDocs) {
                requirements.push('❌ Breaking changes must be documented in PR description');
              } else {
                requirements.push('✅ Breaking changes are documented');
              }
            }
            
            // Check validation results
            const validationPassed = '${{ needs.full-validation.result }}' === 'success';
            const securityPassed = '${{ needs.security-check.result }}' === 'success';
            
            if (validationPassed) {
              requirements.push('✅ Full validation passed');
            } else {
              requirements.push('❌ Full validation failed');
            }
            
            if (securityPassed) {
              requirements.push('✅ Security check passed');
            } else {
              requirements.push('⚠️ Security check has issues');
            }
            
            // Generate report
            const report = `
            ## 📋 PR Requirements Check
            
            ${requirements.join('\n')}
            
            ### 📊 Summary
            - **Change Type:** ${{ needs.analyze-pr.outputs.change_type }}
            - **Breaking Changes:** ${hasBreakingChanges ? '⚠️ Yes - requires careful review' : '✅ No'}
            - **Ready for Merge:** ${requirements.every(r => r.startsWith('✅')) ? '✅ Yes' : '❌ No - fix issues above'}
            
            ${hasBreakingChanges ? '### ⚠️ Breaking Change Notice\nThis PR contains breaking changes. Please ensure:\n- Migration guide is updated\n- Version bump plan is documented\n- Stakeholders are notified' : ''}
            `;
            
            // Post comment if there are issues
            const hasIssues = requirements.some(r => r.startsWith('❌'));
            if (hasIssues) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }
            
            // Set summary
            await core.summary.addRaw(report).write();
            
            // Fail if requirements not met
            if (hasIssues) {
              core.setFailed('PR requirements not met. Please address the issues above.');
            }

  # Auto-approve for specific cases
  auto-approve:
    name: 🤖 Auto Approval
    runs-on: ubuntu-latest
    needs: [analyze-pr, requirements-check]
    if: |
      always() && 
      github.event.pull_request.draft == false &&
      needs.requirements-check.result == 'success' &&
      needs.analyze-pr.outputs.change_type != 'breaking' &&
      (
        github.actor == 'github-actions[bot]' ||
        github.actor == 'dependabot[bot]' ||
        startsWith(github.event.pull_request.title, 'docs:') ||
        startsWith(github.event.pull_request.title, 'chore:')
      )
    
    steps:
      - name: 🤖 Auto-approve safe PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: '🤖 Auto-approved: Safe changes detected (docs, chore, or bot PRs)'
            });

  # Final status check
  pr-status:
    name: 📊 PR Status Summary
    runs-on: ubuntu-latest
    needs: [analyze-pr, full-validation, security-check, requirements-check]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: 📊 Generate final status
        run: |
          echo "## 📊 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 Analysis | ${{ needs.analyze-pr.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Validation | ${{ needs.full-validation.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security | ${{ needs.security-check.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Requirements | ${{ needs.requirements-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.requirements-check.result }}" == "success" ]]; then
            echo "### 🎉 Ready for Review!" >> $GITHUB_STEP_SUMMARY
            echo "This PR has passed all validation checks and is ready for human review." >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🔄 Action Required" >> $GITHUB_STEP_SUMMARY
            echo "This PR has validation issues that need to be addressed before merge." >> $GITHUB_STEP_SUMMARY
          fi